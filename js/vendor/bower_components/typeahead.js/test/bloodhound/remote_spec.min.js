describe("Remote",function(){beforeEach(function(){jasmine.Transport.useMock();this.remote=new Remote({url:"/test?q=%QUERY",prepare:function(a){return a},transform:function(a){return a}});this.transport=this.remote.transport});describe("#cancelLastRequest",function(){it("should cancel last request",function(){this.remote.cancelLastRequest();expect(this.transport.cancel).toHaveBeenCalled()})});describe("#get",function(){it("should have sensible default request settings",function(){var a;a=jasmine.createSpy();spyOn(this.remote,"prepare");this.remote.get("foo",a);expect(this.remote.prepare).toHaveBeenCalledWith("foo",{url:"/test?q=%QUERY",type:"GET",dataType:"json"})});it("should transform request settings with prepare",function(){var a;a=jasmine.createSpy();spyOn(this.remote,"prepare").andReturn([{foo:"bar"}]);this.remote.get("foo",a);expect(this.transport.get).toHaveBeenCalledWith([{foo:"bar"}],jasmine.any(Function))});it("should transform response with transform",function(){var a;a=jasmine.createSpy();spyOn(this.remote,"transform").andReturn([{foo:"bar"}]);this.transport.get.andCallFake(function(c,b){b(null,{})});this.remote.get("foo",a);expect(a).toHaveBeenCalledWith([{foo:"bar"}])});it("should return empty array on error",function(){var a;a=jasmine.createSpy();this.transport.get.andCallFake(function(c,b){b(true)});this.remote.get("foo",a);expect(a).toHaveBeenCalledWith([])})})});