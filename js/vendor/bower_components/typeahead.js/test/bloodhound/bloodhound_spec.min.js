describe("Bloodhound",function(){function c(d){return new Bloodhound(_.mixin({datumTokenizer:a,queryTokenizer:b},d||{}))}beforeEach(function(){jasmine.Remote.useMock();jasmine.Prefetch.useMock();jasmine.Transport.useMock();jasmine.PersistentStorage.useMock()});afterEach(function(){clearAjaxRequests()});describe("#initialize",function(){beforeEach(function(){this.bloodhound=c({initialize:false});spyOn(this.bloodhound,"_initialize").andCallThrough()});it("should not initialize if intialize option is false",function(){expect(this.bloodhound._initialize).not.toHaveBeenCalled()});it("should not support reinitialization by default",function(){var e,d;e=this.bloodhound.initialize();d=this.bloodhound.initialize();expect(e).toBe(d);expect(this.bloodhound._initialize.callCount).toBe(1)});it("should reinitialize if reintialize flag is true",function(){var e,d;e=this.bloodhound.initialize();d=this.bloodhound.initialize(true);expect(e).not.toBe(d);expect(this.bloodhound._initialize.callCount).toBe(2)});it("should clear the index",function(){this.bloodhound=c({initialize:false,prefetch:"/prefetch"});spyOn(this.bloodhound,"clear");this.bloodhound.initialize();expect(this.bloodhound.clear).toHaveBeenCalled()});it("should load data from prefetch cache if available",function(){this.bloodhound=c({initialize:false,prefetch:"/prefetch"});this.bloodhound.prefetch.fromCache.andReturn(fixtures.serialized.simple);this.bloodhound.initialize();expect(this.bloodhound.all()).toEqual(fixtures.data.simple);expect(this.bloodhound.prefetch.fromNetwork).not.toHaveBeenCalled()});it("should load data from prefetch network as fallback",function(){this.bloodhound=c({initialize:false,prefetch:"/prefetch"});this.bloodhound.prefetch.fromCache.andReturn(null);this.bloodhound.prefetch.fromNetwork.andCallFake(d);this.bloodhound.initialize();expect(this.bloodhound.all()).toEqual(fixtures.data.simple);function d(e){e(null,fixtures.data.simple)}});it("should store prefetch network data in the prefetch cache",function(){this.bloodhound=c({initialize:false,prefetch:"/prefetch"});this.bloodhound.prefetch.fromCache.andReturn(null);this.bloodhound.prefetch.fromNetwork.andCallFake(d);this.bloodhound.initialize();expect(this.bloodhound.prefetch.store).toHaveBeenCalledWith(fixtures.serialized.simple);function d(e){e(null,fixtures.data.simple)}});it("should add local after prefetch is loaded",function(){this.bloodhound=c({initialize:false,local:[{foo:"bar"}],prefetch:"/prefetch"});this.bloodhound.prefetch.fromNetwork.andCallFake(d);expect(this.bloodhound.all()).toEqual([]);this.bloodhound.initialize();expect(this.bloodhound.all()).toEqual([{foo:"bar"}]);function d(e){e(null,[])}})});describe("#add",function(){it("should add datums to search index",function(){var d=jasmine.createSpy();this.bloodhound=c().add(fixtures.data.simple);this.bloodhound.search("big",d);expect(d).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])})});describe("#get",function(){beforeEach(function(){this.bloodhound=c({identify:function(e){return e.value},local:fixtures.data.simple})});it("should support array signature",function(){expect(this.bloodhound.get(["big","bigger"])).toEqual([{value:"big"},{value:"bigger"}])});it("should support splat signature",function(){expect(this.bloodhound.get("big","bigger")).toEqual([{value:"big"},{value:"bigger"}])});it("should return nothing for unknown ids",function(){expect(this.bloodhound.get("big","foo","bigger")).toEqual([{value:"big"},{value:"bigger"}])})});describe("#clear",function(){it("should remove all datums to search index",function(){var d=jasmine.createSpy();this.bloodhound=c({local:fixtures.data.simple}).clear();this.bloodhound.search("big",d);expect(d).toHaveBeenCalledWith([])})});describe("#clearPrefetchCache",function(){it("should clear persistent storage",function(){this.bloodhound=c({prefetch:"/prefetch"}).clearPrefetchCache();expect(this.bloodhound.prefetch.clear).toHaveBeenCalled()})});describe("#clearRemoteCache",function(){it("should clear remote request cache",function(){spyOn(Transport,"resetCache");this.bloodhound=c({remote:"/remote"}).clearRemoteCache();expect(Transport.resetCache).toHaveBeenCalled()})});describe("#all",function(){it("should return all local results",function(){this.bloodhound=c({local:fixtures.data.simple});expect(this.bloodhound.all()).toEqual(fixtures.data.simple)})});describe("#search – local",function(){it("should return sync matches",function(){var d=jasmine.createSpy();this.bloodhound=c({local:fixtures.data.simple});this.bloodhound.search("big",d);expect(d).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])})});describe("#search – prefetch",function(){it("should return sync matches",function(){var d=jasmine.createSpy();this.bloodhound=c({initialize:false,prefetch:"/prefetch"});this.bloodhound.prefetch.fromCache.andReturn(fixtures.serialized.simple);this.bloodhound.initialize();this.bloodhound.search("big",d);expect(d).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}])})});describe("#search – remote",function(){it("should return async matches",function(){var e=jasmine.createSpy();this.bloodhound=c({remote:"/remote"});this.bloodhound.remote.get.andCallFake(d);this.bloodhound.search("dog",$.noop,e);expect(e.callCount).toBe(1);function d(g,f){f(fixtures.data.animals)}})});describe("#search – integration",function(){it("should backfill when local/prefetch is not sufficient",function(){var f,e;f=jasmine.createSpy();e=jasmine.createSpy();this.bloodhound=c({sufficient:3,local:fixtures.data.simple,remote:"/remote"});this.bloodhound.remote.get.andCallFake(d);this.bloodhound.search("big",f,e);expect(f).toHaveBeenCalledWith([{value:"big"},{value:"bigger"},{value:"biggest"}]);expect(e).not.toHaveBeenCalled();this.bloodhound.search("bigg",f,e);expect(f).toHaveBeenCalledWith([{value:"bigger"},{value:"biggest"}]);expect(e).toHaveBeenCalledWith(fixtures.data.animals);function d(h,g){g(fixtures.data.animals)}});it("should remove duplicates from backfill",function(){var f,e;f=jasmine.createSpy();e=jasmine.createSpy();this.bloodhound=c({identify:function(g){return g.value},local:fixtures.data.animals,remote:"/remote"});this.bloodhound.remote.get.andCallFake(d);this.bloodhound.search("dog",f,e);expect(f).toHaveBeenCalledWith([{value:"dog"}]);expect(e).toHaveBeenCalledWith([{value:"cat"},{value:"moose"}]);function d(h,g){g(fixtures.data.animals)}})});function a(e){return $.trim(e.value).split(/\s+/)}function b(d){return $.trim(d).split(/\s+/)}});