describe("Menu",function(){var a=WWW();beforeEach(function(){var b;jasmine.Dataset.useMock();setFixtures('<div id="menu-fixture"></div>');b=$("#jasmine-fixtures");this.$node=b.find("#menu-fixture");this.$node.html(fixtures.html.dataset);this.view=new Menu({node:this.$node,datasets:[{}]},a).bind();this.dataset=this.view.datasets[0]});it("should throw an error if node is missing",function(){expect(b).toThrow();function b(){new Menu({datasets:[{}]},a)}});describe("when click event is triggered on a selectable",function(){it("should trigger selectableClicked",function(){var b;this.view.onSync("selectableClicked",b=jasmine.createSpy());this.$node.find(a.selectors.selectable).first().click();expect(b).toHaveBeenCalled()})});describe("when rendered is triggered on a dataset",function(){it("should add empty class to node if empty",function(){this.dataset.isEmpty.andReturn(true);this.$node.removeClass(a.classes.empty);this.dataset.trigger("rendered");expect(this.$node).toHaveClass(a.classes.empty)});it("should remove empty class from node if not empty",function(){this.dataset.isEmpty.andReturn(false);this.$node.addClass(a.classes.empty);this.dataset.trigger("rendered");expect(this.$node).not.toHaveClass(a.classes.empty)});it("should trigger datasetRendered",function(){var b;this.view.onSync("datasetRendered",b=jasmine.createSpy());this.dataset.trigger("rendered");expect(b).toHaveBeenCalled()})});describe("when cleared is triggered on a dataset",function(){it("should add empty class to node if empty",function(){this.dataset.isEmpty.andReturn(true);this.$node.removeClass(a.classes.empty);this.dataset.trigger("cleared");expect(this.$node).toHaveClass(a.classes.empty)});it("should remove empty class from node if not empty",function(){this.dataset.isEmpty.andReturn(false);this.$node.addClass(a.classes.empty);this.dataset.trigger("cleared");expect(this.$node).not.toHaveClass(a.classes.empty)});it("should trigger datasetCleared",function(){var b;this.view.onSync("datasetCleared",b=jasmine.createSpy());this.dataset.trigger("cleared");expect(b).toHaveBeenCalled()})});describe("when asyncRequested is triggered on a dataset",function(){it("should propagate event",function(){var b=jasmine.createSpy();this.dataset.onSync("asyncRequested",b);this.dataset.trigger("asyncRequested");expect(b).toHaveBeenCalled()})});describe("when asyncCanceled is triggered on a dataset",function(){it("should propagate event",function(){var b=jasmine.createSpy();this.dataset.onSync("asyncCanceled",b);this.dataset.trigger("asyncCanceled");expect(b).toHaveBeenCalled()})});describe("when asyncReceieved is triggered on a dataset",function(){it("should propagate event",function(){var b=jasmine.createSpy();this.dataset.onSync("asyncReceived",b);this.dataset.trigger("asyncReceived");expect(b).toHaveBeenCalled()})});describe("#open",function(){it("should add open class to node",function(){this.$node.removeClass(a.classes.open);this.view.open();expect(this.$node).toHaveClass(a.classes.open)})});describe("#close",function(){it("should remove open class to node",function(){this.$node.addClass(a.classes.open);this.view.close();expect(this.$node).not.toHaveClass(a.classes.open)});it("should remove cursor",function(){var b;b=this.view._getSelectables().first();this.view.setCursor(b);expect(b).toHaveClass(a.classes.cursor);this.view.close();expect(b).not.toHaveClass(a.classes.cursor)})});describe("#setLanguageDirection",function(){it("should update css for given language direction",function(){this.view.setLanguageDirection("rtl");expect(this.$node).toHaveAttr("dir","rtl");this.view.setLanguageDirection("ltr");expect(this.$node).toHaveAttr("dir","ltr")})});describe("#selectableRelativeToCursor",function(){it("should return selectable delta spots away from cursor",function(){var c,b;c=this.view._getSelectables().eq(0);b=this.view._getSelectables().eq(1);this.view.setCursor(c);expect(this.view.selectableRelativeToCursor(+1)).toBe(b)});it("should support negative deltas",function(){var c,b;c=this.view._getSelectables().eq(0);b=this.view._getSelectables().eq(1);this.view.setCursor(b);expect(this.view.selectableRelativeToCursor(-1)).toBe(c)});it("should wrap",function(){var c,b;c=this.view._getSelectables().eq(-1);b=this.view.selectableRelativeToCursor(-1);expect(b).toBe(c)});it("should return null if delta lands on input",function(){var b;b=this.view._getSelectables().eq(0);this.view.setCursor(b);expect(this.view.selectableRelativeToCursor(-1)).toBeNull()})});describe("#setCursor",function(){it("should remove cursor if null is passed in",function(){var b;b=this.view._getSelectables().eq(0);this.view.setCursor(b);expect(this.view.getActiveSelectable()).toBe(b);this.view.setCursor(null);expect(this.view.getActiveSelectable()).toBeNull()});it("should move cursor to passed in selectable",function(){var b;b=this.view._getSelectables().eq(0);expect(this.view.getActiveSelectable()).toBeNull();this.view.setCursor(b);expect(this.view.getActiveSelectable()).toBe(b)})});describe("#getSelectableData",function(){it("should extract the data from the selectable element",function(){var c,b;c=$("<div>").data({"tt-selectable-display":"one","tt-selectable-object":"two"});data=this.view.getSelectableData(c);expect(data).toEqual({val:"one",obj:"two"})});it("should return null if no element is given",function(){expect(this.view.getSelectableData($("notreal"))).toBeNull()})});describe("#getActiveSelectable",function(){it("should return the selectable the cursor is on",function(){var b;b=this.view._getSelectables().eq(0);this.view.setCursor(b);expect(this.view.getActiveSelectable()).toBe(b)});it("should return null if the cursor is off",function(){expect(this.view.getActiveSelectable()).toBeNull()})});describe("#getTopSelectable",function(){it("should return the selectable at the top of the menu",function(){var b;b=this.view._getSelectables().eq(0);expect(this.view.getTopSelectable()).toBe(b)})});describe("#update",function(){it("should invoke update on each dataset if valid update",function(){this.view.update("fiz");expect(this.dataset.update).toHaveBeenCalled()});it("should return true when valid update",function(){expect(this.view.update("fiz")).toBe(true)});it("should return false when invalid update",function(){this.view.update("fiz");expect(this.view.update("fiz")).toBe(false)})});describe("#empty",function(){it("should set query to null",function(){this.view.query="fiz";this.view.empty();expect(this.view.query).toBeNull()});it("should add empty class to node",function(){this.$node.removeClass(a.classes.empty);this.view.empty();expect(this.$node).toHaveClass(a.classes.empty)});it("should invoke clear on each dataset",function(){this.view.empty();expect(this.dataset.clear).toHaveBeenCalled()})});describe("#destroy",function(){it("should remove event handlers",function(){var b=this.view.$node;spyOn(b,"off");this.view.destroy();expect(b.off).toHaveBeenCalledWith(".tt")});it("should destroy its datasets",function(){this.view.destroy();expect(this.dataset.destroy).toHaveBeenCalled()});it("should set node element to dummy element",function(){var b=this.view.$node;this.view.destroy();expect(this.view.$node).not.toBe(b)})})});