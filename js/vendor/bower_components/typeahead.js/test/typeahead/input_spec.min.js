describe("Input",function(){var b,c;b={enter:13,esc:27,tab:9,left:37,right:39,up:38,down:40,normal:65};c=WWW();beforeEach(function(){var f;setFixtures(fixtures.html.input+fixtures.html.hint);f=$("#jasmine-fixtures");this.$input=f.find(".tt-input");this.$hint=f.find(".tt-hint");this.view=new Input({input:this.$input,hint:this.$hint},c).bind()});it("should throw an error if no input is provided",function(){expect(f).toThrow();function f(){new Input({},c)}});describe("when the blur DOM event is triggered",function(){it("should reset the input value",function(){this.view.setQuery("wine");this.view.setInputValue("cheese");this.$input.blur();expect(this.$input.val()).toBe("wine")});it("should trigger blurred",function(){var f;this.view.onSync("blurred",f=jasmine.createSpy());this.$input.blur();expect(f).toHaveBeenCalled()})});describe("when the focus DOM event is triggered",function(){it("should update queryWhenFocused",function(){this.view.setQuery("hi");this.$input.focus();expect(this.view.hasQueryChangedSinceLastFocus()).toBe(false);this.view.setQuery("bye");expect(this.view.hasQueryChangedSinceLastFocus()).toBe(true)});it("should trigger focused",function(){var f;this.view.onSync("focused",f=jasmine.createSpy());this.$input.focus();expect(f).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by tab",function(){it("should trigger tabKeyed if no modifiers were pressed",function(){var f;this.view.onSync("tabKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.tab);expect(f).toHaveBeenCalled()});it("should not trigger tabKeyed if modifiers were pressed",function(){var f;this.view.onSync("tabKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.tab,true);expect(f).not.toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by esc",function(){it("should trigger escKeyed",function(){var f;this.view.onSync("escKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.esc);expect(f).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by left",function(){it("should trigger leftKeyed",function(){var f;this.view.onSync("leftKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.left);expect(f).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by right",function(){it("should trigger rightKeyed",function(){var f;this.view.onSync("rightKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.right);expect(f).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by enter",function(){it("should trigger enterKeyed",function(){var f;this.view.onSync("enterKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.enter);expect(f).toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by up",function(){it("should trigger upKeyed",function(){var f;this.view.onSync("upKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.up);expect(f).toHaveBeenCalled()});it("should prevent default if no modifers were pressed",function(){var f=e(this.$input,"keydown",b.up);expect(f.preventDefault).toHaveBeenCalled()});it("should not prevent default if modifers were pressed",function(){var f=e(this.$input,"keydown",b.up,true);expect(f.preventDefault).not.toHaveBeenCalled()})});describe("when the keydown DOM event is triggered by down",function(){it("should trigger downKeyed",function(){var f;this.view.onSync("downKeyed",f=jasmine.createSpy());e(this.$input,"keydown",b.down);expect(f).toHaveBeenCalled()});it("should prevent default if no modifers were pressed",function(){var f=e(this.$input,"keydown",b.down);expect(f.preventDefault).toHaveBeenCalled()});it("should not prevent default if modifers were pressed",function(){var f=e(this.$input,"keydown",b.down,true);expect(f.preventDefault).not.toHaveBeenCalled()})});describe("when the input DOM event is triggered",function(){it("should update query",function(){this.view.setQuery("wine");this.view.setInputValue("cheese");a(this.$input);waitsFor(function(){return this.view.getQuery()==="cheese"})});it("should trigger queryChanged if the query changed",function(){var f;this.view.setQuery("wine");this.view.setInputValue("cheese");this.view.onSync("queryChanged",f=jasmine.createSpy());a(this.$input);expect(f).toHaveBeenCalled()});it("should trigger whitespaceChanged if whitespace changed",function(){var f;this.view.setQuery("wine  bar");this.view.setInputValue("wine bar");this.view.onSync("whitespaceChanged",f=jasmine.createSpy());a(this.$input);expect(f).toHaveBeenCalled()});it("should clear hint if invalid",function(){spyOn(this.view,"clearHintIfInvalid");a(this.$input);expect(this.view.clearHintIfInvalid).toHaveBeenCalled()});it("should check lang direction",function(){var f;this.$input.css("direction","rtl");this.view.onSync("langDirChanged",f=jasmine.createSpy());a(this.$input);expect(this.view.dir).toBe("rtl");expect(this.$hint).toHaveAttr("dir","rtl");expect(f).toHaveBeenCalled()})});describe(".normalizeQuery",function(){it("should strip leading whitespace",function(){expect(Input.normalizeQuery("  foo")).toBe("foo")});it("should condense whitespace",function(){expect(Input.normalizeQuery("foo   bar")).toBe("foo bar")});it("should play nice with non-string values",function(){expect(Input.normalizeQuery(2)).toBe("2");expect(Input.normalizeQuery([])).toBe("");expect(Input.normalizeQuery(null)).toBe("");expect(Input.normalizeQuery(undefined)).toBe("");expect(Input.normalizeQuery(false)).toBe("false")})});describe("#focus",function(){it("should focus the input",function(){this.$input.blur();this.view.focus();expect(this.$input).toBeFocused()})});describe("#blur",function(){it("should blur the input",function(){this.$input.focus();this.view.blur();expect(this.$input).not.toBeFocused()})});describe("#getQuery",function(){it("should act as getter to the query property",function(){this.view.setQuery("mouse");expect(this.view.getQuery()).toBe("mouse")})});describe("#setQuery",function(){it("should act as setter to the query property",function(){this.view.setQuery("mouse");expect(this.view.getQuery()).toBe("mouse")});it("should update input value",function(){this.view.setQuery("mouse");expect(this.view.getInputValue()).toBe("mouse")});it("should trigger queryChanged if the query changed",function(){var f;this.view.setQuery("wine");this.view.onSync("queryChanged",f=jasmine.createSpy());this.view.setQuery("cheese");expect(f).toHaveBeenCalled()});it("should trigger whitespaceChanged if whitespace changed",function(){var f;this.view.setQuery("wine   bar");this.view.onSync("whitespaceChanged",f=jasmine.createSpy());this.view.setQuery("wine bar");expect(f).toHaveBeenCalled()});it("should clear hint if invalid",function(){spyOn(this.view,"clearHintIfInvalid");a(this.$input);expect(this.view.clearHintIfInvalid).toHaveBeenCalled()})});describe("#hasQueryChangedSinceLastFocus",function(){it("should return true if the query has changed since focus",function(){this.view.setQuery("hi");this.$input.focus();this.view.setQuery("bye");expect(this.view.hasQueryChangedSinceLastFocus()).toBe(true)});it("should return false if the query has not changed since focus",function(){this.view.setQuery("hi");this.$input.focus();expect(this.view.hasQueryChangedSinceLastFocus()).toBe(false)})});describe("#getInputValue",function(){it("should act as getter to the input value",function(){this.$input.val("cheese");expect(this.view.getInputValue()).toBe("cheese")})});describe("#setInputValue",function(){it("should act as setter to the input value",function(){this.view.setInputValue("cheese");expect(this.view.getInputValue()).toBe("cheese")});it("should clear hint if invalid",function(){spyOn(this.view,"clearHintIfInvalid");this.view.setInputValue("cheese head");expect(this.view.clearHintIfInvalid).toHaveBeenCalled()});it("should check lang direction",function(){var f;this.$input.css("direction","rtl");this.view.onSync("langDirChanged",f=jasmine.createSpy());a(this.$input);expect(this.view.dir).toBe("rtl");expect(this.$hint).toHaveAttr("dir","rtl");expect(f).toHaveBeenCalled()})});describe("#getHint/#setHint",function(){it("should act as getter/setter to value of hint",function(){this.view.setHint("mountain");expect(this.view.getHint()).toBe("mountain")})});describe("#resetInputValue",function(){it("should reset input value to last query",function(){this.view.setQuery("cheese");this.view.setInputValue("wine");this.view.resetInputValue();expect(this.view.getInputValue()).toBe("cheese")})});describe("#clearHint",function(){it("should set the hint value to the empty string",function(){this.view.setHint("cheese");this.view.clearHint();expect(this.view.getHint()).toBe("")})});describe("#clearHintIfInvalid",function(){it("should clear hint if input value is empty string",function(){this.view.setInputValue("");this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("")});it("should clear hint if input value is not prefix of input",function(){this.view.setInputValue("milk");this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("")});it("should clear hint if overflow exists",function(){spyOn(this.view,"hasOverflow").andReturn(true);this.view.setInputValue("che");this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("")});it("should not clear hint if input value is prefix of input",function(){this.view.setInputValue("che");this.view.setHint("cheese");this.view.clearHintIfInvalid();expect(this.view.getHint()).toBe("cheese")})});describe("#hasOverflow",function(){it("should return true if the input has overflow text",function(){var f=new Array(1000).join("a");this.view.setInputValue(f);expect(this.view.hasOverflow()).toBe(true)});it("should return false if the input has no overflow text",function(){var f="aah";this.view.setInputValue(f);expect(this.view.hasOverflow()).toBe(false)})});describe("#isCursorAtEnd",function(){it("should return true if the text cursor is at the end",function(){this.view.setInputValue("boo");d(this.$input,3);expect(this.view.isCursorAtEnd()).toBe(true)});it("should return false if the text cursor is not at the end",function(){this.view.setInputValue("boo");d(this.$input,1);expect(this.view.isCursorAtEnd()).toBe(false)})});describe("#destroy",function(){it("should remove event handlers",function(){var g,f;f=this.view.$hint;g=this.view.$input;spyOn(f,"off");spyOn(g,"off");this.view.destroy();expect(f.off).toHaveBeenCalledWith(".tt");expect(g.off).toHaveBeenCalledWith(".tt")});it("should set references to DOM elements to dummy element",function(){var f,h,g;f=this.view.$hint;h=this.view.$input;g=this.view.$overflowHelper;this.view.destroy();expect(this.view.$hint).not.toBe(f);expect(this.view.$input).not.toBe(h);expect(this.view.$overflowHelper).not.toBe(g)})});function a(f){var g,h;h=_.isMsie()?"keypress":"input";g=$.Event(h);f.trigger(g)}function e(f,i,h,j){var g;g=$.Event(i,{keyCode:h,altKey:!!j,ctrlKey:!!j,metaKey:!!j,shiftKey:!!j});spyOn(g,"preventDefault");f.trigger(g);return g}function d(i,h){var g=i[0],f;if(g.setSelectionRange){g.focus();g.setSelectionRange(h,h)}else{if(g.createTextRange){f=g.createTextRange();f.collapse(true);f.moveEnd("character",h);f.moveStart("character",h);f.select()}}}});